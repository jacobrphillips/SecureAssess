using API.Entities;

namespace API.Services
{
    public class VulnerabilityReportService
    {
        private readonly IWebHostEnvironment _env;

        public VulnerabilityReportService(IWebHostEnvironment env)
        {
            _env = env;
        }

        public async Task<string> SaveReportAsync(IFormFile file)
        {
            var uploadsFolderPath = Path.Combine(_env.WebRootPath, "uploads");
            if (!Directory.Exists(uploadsFolderPath))
            {
                Directory.CreateDirectory(uploadsFolderPath);
            }

            var filePath = Path.Combine(uploadsFolderPath, file.FileName);

            using (var fileStream = new FileStream(filePath, FileMode.Create))
            {
                await file.CopyToAsync(fileStream);
            }

            return filePath;
        }

        public async Task<VulnerabilityReport> CreateVulnerabilityReportAsync(IFormFile file, int companyId, int assessmentId)
        {
            var filePath = await SaveReportAsync(file);

            var report = new VulnerabilityReport
            {
                FileName = file.FileName,
                FileType = Path.GetExtension(file.FileName).ToLower() == ".csv" ? "CSV" : "XML",
                FilePath = filePath,
                CompanyId = companyId,
                AssessmentId = assessmentId
            };

            return report;
        }

        // TODO: Create methods to parse CSV or XML files
    }
}
